"use strict";(self.webpackChunkarkane_docs=self.webpackChunkarkane_docs||[]).push([[646],{4465:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),s=["components"],l={sidebar_position:2},o="Create a plugin",u={unversionedId:"arkane/create-a-plugin",id:"arkane/create-a-plugin",isDocsHomePage:!1,title:"Create a plugin",description:"Creating the plugin class",source:"@site/docs/arkane/create-a-plugin.md",sourceDirName:"arkane",slug:"/arkane/create-a-plugin",permalink:"/docs/arkane/create-a-plugin",editUrl:"https://github.com/NobleDevelopment/Arkane-Docs/docs/arkane/create-a-plugin.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/arkane/getting-started"},next:{title:"Create a feature",permalink:"/docs/arkane/create-a-feature"}},c=[{value:"Creating the plugin class",id:"creating-the-plugin-class",children:[]},{value:"Installing Features",id:"installing-features",children:[]},{value:"Adding dependency injection modules",id:"adding-dependency-injection-modules",children:[]}],d={toc:c};function p(e){var n=e.components,t=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-a-plugin"},"Create a plugin"),(0,r.kt)("h2",{id:"creating-the-plugin-class"},"Creating the plugin class"),(0,r.kt)("p",null,"Creating a plugin is incredibly easy with Arkane. You simply just need to extend ArkanePlugin instead of JavaPlugin."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"import org.nobledev.arkane.architecture.plugin.ArkanePlugin\n\nclass MyPlugin : ArkanePlugin() {\n}\n")),(0,r.kt)("p",null,"This gives you access to all of the Arkane features, like installing features, creating dependency injection modules, etc."),(0,r.kt)("h2",{id:"installing-features"},"Installing Features"),(0,r.kt)("p",null,"To install a feature, you simply call the install function in your plugins init block."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyPlugin : ArkanePlugin() {\n    init {\n        install(CommandAPIFeature)\n    }\n}\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Singletons vs instances")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Features can be both objects and classes. If a feature is a class, you must construct it!"))),(0,r.kt)("h2",{id:"adding-dependency-injection-modules"},"Adding dependency injection modules"),(0,r.kt)("p",null,"Adding items to the dependency registry is pretty straight forward. You simply create a module for it while initializing your plugin. Anything can be added to the registry!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"\n    init {\n        install(CommandAPIFeature)\n\n        createModule {\n            single<TestPlugin> { this@TestPlugin }\n        }\n        \n    }\n")),(0,r.kt)("p",null,"There are two types of registrations. The one provided above is a singleton registry. This uses the same instance for all injection. If you require a new instance to be instantiated for every injection, you can use the factory method instead. You simply just provide a function to instantiate it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"        createModule {\n            single<TestPlugin> { this@TestPlugin }\n\n            factory {\n                ItemStack(Material.AIR)\n            }\n        }\n\n")))}p.isMDXComponent=!0}}]);